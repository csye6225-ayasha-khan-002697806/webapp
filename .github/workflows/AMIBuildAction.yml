name: Integration Actions to Build Custom Image

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  if_pull_request_merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      HOST: ${{ secrets.HOST }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DATABASE: ${{ secrets.DATABASE }}
      PORT: ${{ secrets.PORT }}
      NODE_ENV: ${{secrets.NODE_ENV}}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
      DEV_ACCOUNT_ID: ${{ secrets.DEV_ACCOUNT_ID }}        # DEV AWS Account ID
      DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}      # DEMO AWS Account ID

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install AWS CLI
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Install Packer
      - name: Setup Packer
        uses: hashicorp/setup-packer@v3
        with:
          version: latest

      # Step 4: Create Zip File of Webapp Repo
      - name: Create Zip File of Webapp Repo
        run: |
          zip -r webapp.zip .

      # Step 5: Packer build to create machine image
      - name: Init and Build Custom Image
        run: |
          packer init application-custom-image.pkr.hcl
          packer build application-custom-image.pkr.hcl

      # Step 6: Share the AMI with DEMO Account and Save AMI_ID as Artifact
      - name: Share the AMI and Save AMI_ID
        id: share_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
              --owners self \
              --filters "Name=state,Values=available" \
              --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
              --output text)

          if [ -n "$AMI_ID" ]; then
            echo "Sharing AMI $AMI_ID with DEMO account..."
            aws ec2 modify-image-attribute --image-id "$AMI_ID" \
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ env.DEMO_ACCOUNT_ID }}\"}]}"
            echo "::set-output name=ami_id::$AMI_ID"
            echo "$AMI_ID" > ami_id.txt
          else
            echo "AMI not found, exiting."
            exit 1
          fi

      # Step 7: Upload AMI_ID as an Artifact
      - name: Upload AMI_ID Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ami_id
          path: ami_id.txt


  autoscaling_refresh:
      needs: if_pull_request_merge  # Changed from 'packer_build_ami' to 'if_pull_request_merge'
      runs-on: ubuntu-latest
      name: Auto Scaling Group Launch Template & Instance Refresh

      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        DEPLOY_ENVIRONMENT: ${{ secrets.DEPLOY_ENVIRONMENT }}
        LAUNCH_TEMPLATE_ID: ${{ secrets.LAUNCH_TEMPLATE_ID }}
        AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}  # Now using a secret


      steps:
        # Step 1: Configure AWS Credentials Dynamically Based on Environment
        - name: Configure AWS Credentials for Dev
          if: ${{ env.DEPLOY_ENVIRONMENT == 'dev' }}
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Configure AWS Credentials for Prod
          if: ${{ env.DEPLOY_ENVIRONMENT == 'prod' }}
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
            aws-region: ${{ env.AWS_REGION }}

        # Step 2: Create a New Launch Template Version with Latest AMI ID
        - name: Create New Launch Template Version
          id: create_lt_version
          run: |
            AMI_ID=${{ needs.if_pull_request_merge.outputs.ami_id }}  # Use output from the 'if_pull_request_merge' job
            echo "Creating new Launch Template version with AMI ID: $AMI_ID"
            aws ec2 create-launch-template-version \
                --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
                --source-version 1 \
                --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
                --no-cli-pager

        # Step 3: Start Instance Refresh for Auto Scaling Group
        - name: Start Instance Refresh
          id: start_refresh
          run: |
            REFRESH_ID=$(aws autoscaling start-instance-refresh \
                --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP_NAME }} \
                --query "InstanceRefreshId" \
                --output text \
                --no-cli-pager)
            echo "Instance Refresh started with ID: $REFRESH_ID"
            echo "instance_refresh_id=$REFRESH_ID" >> $GITHUB_ENV

        # Step 4: Wait for Instance Refresh to Complete
        - name: Wait for Instance Refresh Completion
          run: |
            echo "Waiting for instance refresh to complete..."
            while true; do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                  --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP_NAME }} \
                  --query "InstanceRefreshes[?InstanceRefreshId=='${{ env.instance_refresh_id }}'].Status" \
                  --output text \
                  --no-cli-pager)
              echo "Current status: $STATUS"
              if [[ "$STATUS" == "Successful" ]]; then
                echo "Instance Refresh completed successfully."
                break
              elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                echo "Instance Refresh failed or was cancelled. Exiting."
                exit 1
              fi
              sleep 30
            done
